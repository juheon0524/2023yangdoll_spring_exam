@Component => 스캔 => bean으로 등록(객체로 생성)
- 개발자가 직접 작성한 Class 를 Bean으로 등록하기 위한 Annotation, name이 아닌 value를 이용해 Bean의 이름을 지정한다.
@Controller

@Service

@Repository
- DataBase에 접근하는 method를 가지고 있는 Class에서 쓰인다.

@RequestMapping 
- (value = "요청경로", )
@GetMapping

@PostMapping


=========================================================
컨트롤러의 개수 : 용도(테이블의 CRUD)에 따라서 만들어 주는 것이 일반적이다.
계시판에 관련된 요청이 이루어진다면 이를 전담하는 컨트롤러를 만들어 주는 것이 일반적이다.
컨트롤러는 사용자의 요청(request)을 분석해서

1) 서비스 레이어에게 일을 지시하는 역할 => 자동주입으로 필드를 선언해야한다.
2) 결과물을 뷰가 사용할 수 있도록 특정 공간(리퀘스트 영역, 세션영역)에 저장하는 역할을 한다.
3) 해당 결과물 page를 실행 시켜서 응답(response)한다.

========================================================

컨트롤러를 만드는 요령
1. 컨트롤러의 이름을 명세화하고 명세화된 이름의 클래스를 정의 한 후 @Controller 어노테이션을 추가한다.

2. 서비스 인터페이스를 명세화 한다.
   명세화된 인터페이스 타입의 필드를 선언하고 @Autowired 어노테이션을 추가한다.

3. 사용자의 요청을 명세화 한다
   명세화된 요청에 맞게 메서드를 정의한다.
	=> 해당 메서드에 @RequestMapping(value="요청명세")를 사용하거나 @RequestMapping하위 어노테이션을 사용한다.
   3-1 메서드 정의시 반환되는 타입을 결정한다.
	void, String, 사용자정의VO클래스 또는 List<사용자정의VO클래스>중 하나를 선택하여 지정한다.
   3-2 매개변수로 메서드 수행에 필요한 자료의 명세를 나열한다.
   3-3 메서드 본체에서 필요에 따라 해당 요청에 맞는 작업을 서비스 레이어에게 지시한다.
   

