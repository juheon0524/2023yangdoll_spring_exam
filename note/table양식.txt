  CREATE TABLE "HR"."EMPLOYEES" 
   (	"EMPLOYEE_ID"	 NUMBER(6,0), 
	"FIRST_NAME"	 VARCHAR2(20 BYTE), 
	"LAST_NAME"	 VARCHAR2(25 BYTE)	CONSTRAINT "EMP_LAST_NAME_NN" NOT NULL , 
	"EMAIL"		 VARCHAR2(25 BYTE) 	CONSTRAINT "EMP_EMAIL_NN" NOT NULL , 
	"PHONE_NUMBER" VARCHAR2(20 BYTE), 
	"HIRE_DATE" 	DATE 			CONSTRAINT "EMP_HIRE_DATE_NN" NOT NULL , 
	"JOB_ID" 		VARCHAR2(10 BYTE) 	CONSTRAINT "EMP_JOB_NN" NOT NULL , 
	"SALARY"		 NUMBER(8,2), 
	"COMMISSION_PCT" NUMBER(2,2), 
	"MANAGER_ID" 	NUMBER(6,0), 
	"DEPARTMENT_ID" NUMBER(4,0), 
	 CONSTRAINT "EMP_SALARY_MIN" CHECK (salary > 0), 
	 CONSTRAINT "EMP_EMAIL_UK" UNIQUE ("EMAIL")
	 CONSTRAINT "EMP_EMP_ID_PK" PRIMARY KEY ("EMPLOYEE_ID")
	 CONSTRAINT "EMP_DEPT_FK" FOREIGN KEY ("DEPARTMENT_ID")
	  REFERENCES"HR"."DEPARTMENTS" ("DEPARTMENT_ID"), 
	 CONSTRAINT "EMP_JOB_FK" FOREIGN KEY ("JOB_ID")
	  REFERENCES "HR"."JOBS" ("JOB_ID"), 
	 CONSTRAINT "EMP_MANAGER_FK" FOREIGN KEY ("MANAGER_ID")
	  REFERENCES "HR"."EMPLOYEES" ("EMPLOYEE_ID") 
   )

entity = table
object = 만들어진 모든 것들 중에서 하나 하나를 오브젝트라고 한다.
object와 관련된 명령(?)
- create : 만들기
- alter : 만들어진 오브젝트를 수정
- drop : 만들어진 오브젝트를 수정
- select : 오브젝트를 조회하는 명령 => object에 대해서 명령을 수행하면 그 결과가 오라클 시스템에서 관리하는 해당 오브젝트 관련테이블에 수록이된다.

데이터(실제 자료) 관련된 명령어 => DML(데이터 조작에 관련된 명령)
- insert
- delete
- update
- select

데이터 제어어(DCL)
- grant
- revoke

오라클 데이터 타입
- 문자형 데이터 : varchar2, long 반드시 크기를 저장해 줘야한다.저장된 크기보다 큰 데이터를 입력할 경우 오류가 발생한다.
  varchar2(4000), long(2GB) : 가변길이 => 데이터에 따라서 길이가 결정된다.
  참고 : char, 유니코드문자형접두어 n => nchar, nvarchar2


- 숫자형 데이터 : 최대표현 범위(보장할 수 있는 전체자리수) 38자리
  number(전체자리수, [소수이하자리수])
  => 소수이하 자리수가 전체자리수보다 큰 수가 올 수 있으며(기본적인 체크기능이 있다)
  => 소수이하 자리수가 음수가 올 수도 있다 : 정수부분의 자리수는 음수부분의 숫자만큼 늘어난며. 음수부분의 자릿수 만큼 정수부분의 값이 0으로 채워진다.
  참고 : ANSI에서 지원하는 타입도 존재한다. integer, float => 안시 숫자타입을 지정할 경우 오라클은 내부적으로 number타입으로 바꾼다.


- 날짜형 데이터 
  date : 7바이트 크기를 갖는다. 년-월-일 또는 일-월-년의 형태로 표현한다.
  timestamp : 오라클 환경변수에 따라서 크기가 다르다(7~11바이트의 크기를 갖는다. <= 밀리초까지 표현 가능한 타입이다.)
  timestamp with local time zone 

- 참고 : 대용량 데이터 RAW타입, Long RAW타입, LOB타입

ANSI 데이터 타입과 DBMS 벤더(Oracle) 타입
character(n), char(n) =====> char(n)
character varying(n), char varying(n) =====> varchar2(n), varchar(n)[오라클에서는 적극적으로 비권장한다.]
numeric(p,s) decimal(p,s) =====> number(p,s)
integer, int, smallint =====> number, number(38)
float, double percision =====> number

== 데이터의 무결성을 위한 컬럼 제약 조건 == 

1. 기본키(primary key) : 
  테이블에 유일한 값을 갖는 컬럼에 지정, => 테이블에 저장된 데이터들을 구별하는 역할을 한다. => 각각의 데이터들이 구별될 수 있도록 하는 것을 제1 정규화라고 한다.
  하나의 테이블에는 하나의 기본키만 가질 수 있다.
  기본키로 지정된 컬럼은 null값을 가질 수 없다.
  하나의 컬럼을 기본키로 지정할 수 있고, 여러개의 컬럼을 묶어서 하나의 기본키로 설정할 수 있다.
  하나의 컬럼을 기본키로 지정할 경우 인라인 방식과 아웃라인방식으로 제약조건을 지정할 수 있다.
  여러개의 컬럼을 묶어서 하나의 기본키로 설정할 경우 반드시 아웃라인 방식으로 제약조건을 지정해야 한다.
  기본키를 설정하면 자동 인덱싱이 생성된다. 인덱싱 이름은 제약조건명이 된다.

2. null은 특정한 컬럼에 값을 입력하지 않을 경우 null값을 갖는다.
   null은 모든 연산에서 제외가 된다. => null 값을 가진 컬럼이 연산에 참여할 경우 반드시 null관련 함수 사용 유무를 고민해봐야 한다.
  
   not null 컬럼은 해당 컬럼에 반드시 값이 들어있음을 의미한다. => 입력시 반드시 입력되어야 한다.
   not null은 인라인으로만 제약조건을 부여할 수 있다.

3. check : 조건에 합당한 자료가 입력되었는지를 검증
   -일반적으로 특정 범위를 지정하거나 특정 문자열만을 저장되도록 하는 경우
    예) 성별을 저장하는 컬럼에 남,여만 저장되도록 한정, 양의 정수만 저장되도록 하는 경우, 0~100사이의 숫자만 저장되도록 하는 경우
   -not null 제약 조건과 함께 사용하면 더 효과적이다. => not null제약조건이 없을 경우 해당 컬럼에 null값은 저장될 수 있다.
   -aaa컬럼의 크기는 35인데 반드시 12자 이상 35자 이하의 데이터가 입력이 되어야 한다.
   -프로그래밍과 연동된 작업에서는 잘 사용되지는 않는다. => 클라이언트의 입력 단계에서 데이터의 무결성을 체크하기 때문이다.

4. unique : 중복 데이터 입력 방지 => null을 허용한다.
   - 하나의 테이블에 여러개의 unique제약 조건이 올 수 있다.
   - not null을 지정한 컬럼에 unique제약조건을 부여할 경우 기본키와 같은 역할을 수행한다.
   - unique로 지정될 경우 자동 인덱싱이 된다.
   - 여러 컬럼을 묶어서 하나의 unique로 지정할 수 있다.
   ex) email컬럼같은 경우 unique로 지정, primary key로 지정한다. => 손전화번호(국가코드 포함)를 기본키나 유니큐로 지정하는 것을 고려해보자.
       => 주민등록번호는 이론상으로는 유일하지만 실제로는 중복되는 데이터가 있다.

5. FOREIGN KEY : 다른 테이블(부모 테이블)과의 관계 설정에 사용되는 제약조건
   - 부모테이블에 정의된 데이터만 입력할 수 있도록 제약조건을 부여한다. ==> CONSTRAINT 제약조건명 FOREIGN KEY (컬럼명...)
   - 참조되는 테이블에 대한 정보가 필요하다. ==>  REFERENCES 부모테이블명 (컬럼명...)
   - 참조되는 테이블의 컬럼의 결과는 반드시 하나여야 한다.

   - 두개의 테이블이 서로 상호 참조할 경우는 테이블 생성시 참조키를 지정하는 것이 아니라 일정 데이터를 입력한 후에 지정하는 경우가 일방적이다.

** 테이블 생성시 컬럼의 순서에 따라서 성능의 차이가 발생한다.
- 가능하면 유일한 데이터를 담은 컬럼을 먼저 정의한다.
- 조건절에서 자주 사용되는 컬럼을 먼저 정의한다.
- 인덱스로 지정되는 컬럼을 먼저 정의한다.
- 카디날이 낮은 컬럼을 먼저 정의한다.(데이터의 범위가 넓은 것(중복되는 데이터가 별로없다)을 먼저 정의한다.)

테이블의 컬럼의 이름이나 타입의 수정(modify), 삭제(drop), 추가(add)해야 한다.
=> 기본형식 : ALTER TABLE 테이블명 수정작업에 관련된 키워드

1. 테이블의 컬럼 타입 변경
  alter table 테이블명 modify 변경될데이터타입

2. 테이블의 컬럼 이름을 변경
  alter table 테이블명 rename column 전컬럼명 to 변경할 컬럼명

3. 테이블의 컬럼 추가
   alter table 테이블명 add 컬럼명 데이터타입 [인라인레벨의 제약조건]

4. 테이블의 컬럼 삭제
   alter table 테이블명 drop column 컬럼명

5. 테이블의 제약조건 추가
  alter table 테이블명 add constraint 제약조건이름 제약조건(컬럼명)
  not null은 테이블 컬럼 타입 변경 구문을 이용해서 추가한다.
  

















